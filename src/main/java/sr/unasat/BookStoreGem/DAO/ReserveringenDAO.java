package sr.unasat.BookStoreGem.DAO;import sr.unasat.BookStoreGem.Entities.Books;import sr.unasat.BookStoreGem.Entities.Klanten;import sr.unasat.BookStoreGem.Entities.Reserveringen;import sr.unasat.BookStoreGem.config.JPAConfiguration;import javax.persistence.EntityManager;import javax.persistence.EntityTransaction;import javax.persistence.TypedQuery;import java.util.List;public class ReserveringenDAO {    private EntityManager entityManager;    EntityTransaction transaction = null;    public ReserveringenDAO(EntityManager entityManager) {        this.entityManager = entityManager;    }    public Reserveringen create (Reserveringen reserveringen){        try {            //get a transaction            transaction = entityManager.getTransaction();            //begin transaction            if(!transaction.isActive()){                transaction.begin();            }            //save the reserveringenobject            entityManager.persist(reserveringen);            //commit the transaction            transaction.commit();            System.out.println("new reservering object id: "+ reserveringen.getIdReservatie() + " has been added");        }catch (Exception e){            if(transaction!=null){                transaction.rollback();            }            System.out.println("rollback transaction");            e.printStackTrace();        }        return reserveringen;    }    public Reserveringen updatereserveringen(int id, Reserveringen reserveringen){        try {            transaction = entityManager.getTransaction();            transaction.begin();            Reserveringen reservering = entityManager.find(Reserveringen.class,id);            // gereserveerd aantallen van de boeken die al eerder geboekt was wordt -1 afgetrokken            List<Books> reserveringBookList = reservering.getBooksList();            if(reserveringBookList.size() == 1){                Books book1 = reserveringBookList.get(0);                book1.setGereserveerd_aantal(book1.getGereserveerd_aantal() - 1);            }            if(reserveringBookList.size() == 2){                Books book1 = reserveringBookList.get(0);                Books book2 = reserveringBookList.get(1);                book1.setGereserveerd_aantal(book1.getGereserveerd_aantal() - 1);                book2.setGereserveerd_aantal(book2.getGereserveerd_aantal() - 1);            }if(reserveringBookList.size() == 3){                Books book1 = reserveringBookList.get(0);                Books book2 = reserveringBookList.get(1);                Books book3 = reserveringBookList.get(2);                book1.setGereserveerd_aantal(book1.getGereserveerd_aantal() - 1);                book2.setGereserveerd_aantal(book2.getGereserveerd_aantal() - 1);                book3.setGereserveerd_aantal(book3.getGereserveerd_aantal() - 1);            }            reservering.setReservatieDatum(reserveringen.getReservatieDatum());            reservering.setTotal_amount(reserveringen.getTotal_amount());            reservering.setKlanten(reserveringen.getKlanten());            reservering.setBooksList(reserveringen.getBooksList());            entityManager.merge(reservering);            transaction.commit();            System.out.println("record : " +id + " has been updated");            return  reservering;        }catch ( Exception e) {            // if there are any exceptions, roll back the changes            if(transaction != null){                transaction.rollback();            }            //pritn the exception            e.printStackTrace();        }        return  null;    }    public void delete(int id){        try{            transaction = entityManager.getTransaction();            transaction.begin();            // get Reservatie id            Reserveringen reserveringen  = entityManager.find(Reserveringen.class,id);            entityManager.remove(reserveringen);            //commit transaction            transaction.commit();            System.out.println("record: " +id + " has been deleted");        }catch (Exception e) {            // if there are any exceptions, roll back the changes            if (transaction != null){                transaction.rollback();                e.printStackTrace();                System.out.println("could not delete record");            }        }    }    public List<Reserveringen> retrievReserveringList(){        entityManager.getTransaction().begin();        String jpql = "select r from Reserveringen r";        TypedQuery<Reserveringen> query = entityManager.createQuery(jpql,Reserveringen.class);        List<Reserveringen> ReserveringenList = query.getResultList();        entityManager.getTransaction().commit();        return ReserveringenList;    }    public Reserveringen selectReserveringenById(int id){        Reserveringen reserveringen = entityManager.find(Reserveringen.class,id);        return  reserveringen;    }}